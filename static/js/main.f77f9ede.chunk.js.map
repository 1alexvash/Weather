{"version":3,"sources":["components/WeatherIcon.js","components/WeatherDetails.js","App.js","index.js"],"names":["WeatherIcon","_ref","icon","dayOrNight","length","react_default","a","createElement","className","concat","id","WeatherDetails","temperature","city","time","react","App","_useState","useState","dataReady","undefined","Date","getHours","getMinutes","status","_useState2","Object","slicedToArray","state","setState","getCity","asyncToGenerator","regenerator_default","mark","_callee2","wrap","_context2","prev","next","navigator","geolocation","getCurrentPosition","_ref2","_callee","position","lat","lon","location","_context","coords","latitude","longitude","objectSpread","axios","get","sent","fetchWeatherData","data","results","components","town","t0","console","log","stop","_x","apply","this","arguments","err","_ref3","_callee3","weather","_context3","Math","round","main","temp","_x2","useEffect","components_WeatherIcon","components_WeatherDetails","ReactDOM","render","src_App","document","getElementById"],"mappings":"oPAYeA,EAVK,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACfC,EAAaD,EAAKA,KAAKA,EAAKA,KAAKE,OAAS,GAEhD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAS,WAAAC,OAAaP,EAAKQ,GAAlB,KAAAD,OAAwBN,OCG3BQ,EARQ,SAAAV,GAAA,IAAGW,EAAHX,EAAGW,YAAaC,EAAhBZ,EAAgBY,KAAMC,EAAtBb,EAAsBa,KAAtB,OACrBT,EAAAC,EAAAC,cAACQ,EAAA,SAAD,KACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQI,EAAvB,UACAP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQK,GACvBR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQM,KCwGZE,SAtGH,WAAM,IAAAC,EACUC,mBAAS,CACjCC,WAAW,EACXjB,UAAMkB,EACNR,iBAAaQ,EACbP,UAAMO,EACNN,KAAI,GAAAL,QAAK,IAAIY,MAAOC,WAAhB,KAAAb,QACF,IAAIY,MAAOE,cAAgB,IACvB,IAAIF,MAAOE,aACX,KAAM,IAAIF,MAAOE,cAEvBC,OAAQ,eAXMC,EAAAC,OAAAC,EAAA,EAAAD,CAAAT,EAAA,GACTW,EADSH,EAAA,GACFI,EADEJ,EAAA,GAcVK,EAAO,eAAA7B,EAAAyB,OAAAK,EAAA,EAAAL,CAAAM,EAAA1B,EAAA2B,KAAG,SAAAC,IAAA,OAAAF,EAAA1B,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACVC,UAAUC,aACZD,UAAUC,YAAYC,mBAAtB,eAAAC,EAAAhB,OAAAK,EAAA,EAAAL,CAAAM,EAAA1B,EAAA2B,KACE,SAAAU,EAAMC,GAAN,IAAAC,EAAAC,EAAAC,EAAA,OAAAf,EAAA1B,EAAA6B,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,cACQO,EAAMD,EAASK,OAAOC,SACtBJ,EAAMF,EAASK,OAAOE,eAEX/B,IAAbwB,GACFf,EAASH,OAAA0B,EAAA,EAAA1B,CAAA,GACJE,EADG,CAENJ,OAAQ,oCAPdwB,EAAAX,KAAA,EAAAW,EAAAV,KAAA,EAY2Be,IAAMC,IAAN,kDAAA7C,OAC6BoC,EAD7B,QAAApC,OACuCqC,EADvC,mDAZ3B,OAYUC,EAZVC,EAAAO,KAeIC,EAAiBT,EAASU,KAAKC,QAAQ,GAAGC,WAAWC,MAfzDZ,EAAAV,KAAA,iBAAAU,EAAAX,KAAA,GAAAW,EAAAa,GAAAb,EAAA,SAiBInB,EAASH,OAAA0B,EAAA,EAAA1B,CAAA,GACJE,EADG,CAENJ,OAAQ,4BAEVsC,QAAQC,IAARf,EAAAa,IArBJ,yBAAAb,EAAAgB,SAAArB,EAAA,kBADF,gBAAAsB,GAAA,OAAAvB,EAAAwB,MAAAC,KAAAC,YAAA,GAyBE,SAAAC,GACExC,EAASH,OAAA0B,EAAA,EAAA1B,CAAA,GACJE,EADG,CAENJ,OAAQ,uCAEVsC,QAAQC,IAAIM,KAhCJ,wBAAAjC,EAAA4B,SAAA9B,MAAH,yBAAAjC,EAAAiE,MAAAC,KAAAC,YAAA,GAsCPZ,EAAgB,eAAAc,EAAA5C,OAAAK,EAAA,EAAAL,CAAAM,EAAA1B,EAAA2B,KAAG,SAAAsC,EAAM1D,GAAN,IAAA2D,EAAA,OAAAxC,EAAA1B,EAAA6B,KAAA,SAAAsC,GAAA,cAAAA,EAAApC,KAAAoC,EAAAnC,MAAA,cAAAmC,EAAApC,KAAA,EAAAoC,EAAAnC,KAAA,EAICe,IAAMC,IAAN,qDAAA7C,OACiCI,EADjC,WAAAJ,OAHV,mCAGU,kBAJD,OAOE,OAHjB+D,EAJeC,EAAAlB,MAOT/B,QACVK,EAASH,OAAA0B,EAAA,EAAA1B,CAAA,GACJE,EADG,CAENT,WAAW,EACXjB,KAAMsE,EAAQf,KAAKe,QAAQ,GAC3B3D,OACAD,YAAa8D,KAAKC,MAAMH,EAAQf,KAAKmB,KAAKC,SAbzBJ,EAAAnC,KAAA,gBAAAmC,EAAApC,KAAA,EAAAoC,EAAAZ,GAAAY,EAAA,SAiBrB5C,EAASH,OAAA0B,EAAA,EAAA1B,CAAA,GACJE,EADG,CAENJ,OAAQ,kCAEVsC,QAAQC,IAARU,EAAAZ,IArBqB,yBAAAY,EAAAT,SAAAO,EAAA,iBAAH,gBAAAO,GAAA,OAAAR,EAAAJ,MAAAC,KAAAC,YAAA,GA8BtB,OALAW,oBAAU,WACRjD,KAEC,IAGDzB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAC,QAAc,IAAIY,MAAOC,aACrCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZoB,EAAMT,UACLd,EAAAC,EAAAC,cAACQ,EAAA,SAAD,KACEV,EAAAC,EAAAC,cAACyE,EAAD,CAAa9E,KAAM0B,EAAM1B,KAAMY,KAAMc,EAAMd,OAC3CT,EAAAC,EAAAC,cAAC0E,EAAD,CACErE,YAAagB,EAAMhB,YACnBC,KAAMe,EAAMf,KACZC,KAAMc,EAAMd,QANjB,GAAAL,OAUImB,EAAMJ,YCnGnB0D,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.f77f9ede.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst WeatherIcon = ({ icon }) => {\r\n  const dayOrNight = icon.icon[icon.icon.length - 1];\r\n\r\n  return (\r\n    <div className=\"icon\">\r\n      <i className={`owf owf-${icon.id}-${dayOrNight}`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherIcon;\r\n","import React, { Fragment } from \"react\";\r\n\r\nconst WeatherDetails = ({ temperature, city, time }) => (\r\n  <Fragment>\r\n    <div className=\"temp\">{temperature} Â°C</div>\r\n    <div className=\"city\">{city}</div>\r\n    <div className=\"time\">{time}</div>\r\n  </Fragment>\r\n);\r\n\r\nexport default WeatherDetails;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport WeatherIcon from \"./components/WeatherIcon\";\r\nimport WeatherDetails from \"./components/WeatherDetails\";\r\n\r\nimport \"./scss/main.css\";\r\n\r\nconst App = () => {\r\n  const [state, setState] = useState({\r\n    dataReady: false,\r\n    icon: undefined,\r\n    temperature: undefined,\r\n    city: undefined,\r\n    time: `${new Date().getHours()}:${\r\n      new Date().getMinutes() >= 10\r\n        ? new Date().getMinutes()\r\n        : \"0\" + new Date().getMinutes()\r\n    }`,\r\n    status: \"Loading...\"\r\n  });\r\n\r\n  const getCity = async () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        async position => {\r\n          const lat = position.coords.latitude;\r\n          const lon = position.coords.longitude;\r\n\r\n          if (position === undefined) {\r\n            setState({\r\n              ...state,\r\n              status: \"Location data is not available\"\r\n            });\r\n          }\r\n\r\n          try {\r\n            const location = await axios.get(\r\n              `https://api.opencagedata.com/geocode/v1/json?q=${lat}%2C+${lon}&key=83cdb08ee1ff42b388fca37dd29a98a9&pretty=1`\r\n            );\r\n            fetchWeatherData(location.data.results[0].components.town);\r\n          } catch (err) {\r\n            setState({\r\n              ...state,\r\n              status: \"Can't get location API\"\r\n            });\r\n            console.log(err);\r\n          }\r\n        },\r\n        err => {\r\n          setState({\r\n            ...state,\r\n            status: \"Geolocation data is not available\"\r\n          });\r\n          console.log(err);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const fetchWeatherData = async city => {\r\n    const appId = \"4a7bba8e35b7bfadb8a039bd6b248e38\";\r\n\r\n    try {\r\n      const weather = await axios.get(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${appId}&units=metric`\r\n      );\r\n      if (weather.status === 200) {\r\n        setState({\r\n          ...state,\r\n          dataReady: true,\r\n          icon: weather.data.weather[0],\r\n          city,\r\n          temperature: Math.round(weather.data.main.temp)\r\n        });\r\n      }\r\n    } catch (err) {\r\n      setState({\r\n        ...state,\r\n        status: \"Weather API is not available\"\r\n      });\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCity();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`App time-${new Date().getHours()}`}>\r\n      <div className=\"content\">\r\n        {state.dataReady ? (\r\n          <Fragment>\r\n            <WeatherIcon icon={state.icon} time={state.time} />\r\n            <WeatherDetails\r\n              temperature={state.temperature}\r\n              city={state.city}\r\n              time={state.time}\r\n            />\r\n          </Fragment>\r\n        ) : (\r\n          `${state.status}`\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}