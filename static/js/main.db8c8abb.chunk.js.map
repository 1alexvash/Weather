{"version":3,"sources":["components/WeatherIcon.js","components/WeatherDetails.js","App.js","index.js"],"names":["WeatherIcon","_ref","icon","dayOrNight","length","react_default","a","createElement","className","concat","id","WeatherDetails","temperature","time","react","App","_useState","useState","dataReady","undefined","Date","getHours","getMinutes","_useState2","Object","slicedToArray","state","setState","fetchWeatherData","asyncToGenerator","regenerator_default","mark","_callee","lat","lon","weather","wrap","_context","prev","next","axios","get","sent","console","log","status","objectSpread","data","Math","round","main","temp","stop","_x","_x2","apply","this","arguments","useEffect","navigator","geolocation","getCurrentPosition","_ref2","_callee2","position","_context2","coords","latitude","longitude","_x3","components_WeatherIcon","components_WeatherDetails","ReactDOM","render","src_App","document","getElementById"],"mappings":"sPAYeA,EAVK,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACfC,EAAaD,EAAKA,KAAKA,EAAKA,KAAKE,OAAS,GAEhD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAS,WAAAC,OAAaP,EAAKQ,GAAlB,KAAAD,OAAwBN,OCE3BQ,EAPQ,SAAAV,GAAA,IAAGW,EAAHX,EAAGW,YAAaC,EAAhBZ,EAAgBY,KAAhB,OACrBR,EAAAC,EAAAC,cAACO,EAAA,SAAD,KACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQI,EAAvB,UACAP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQK,KC0DZE,SAvDH,WAAM,IAAAC,EACUC,mBAAS,CACjCC,WAAW,EACXhB,UAAMiB,EACNP,iBAAaO,EACbN,MAAM,IAAIO,MAAOC,WAAa,KAAM,IAAID,MAAOE,eALjCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,GACTU,EADSH,EAAA,GACFI,EADEJ,EAAA,GAQVK,EAAgB,eAAA3B,EAAAuB,OAAAK,EAAA,EAAAL,CAAAM,EAAAxB,EAAAyB,KAAG,SAAAC,EAAOC,EAAKC,GAAZ,IAAAC,EAAA,OAAAL,EAAAxB,EAAA8B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAIDC,IAAMC,IAAN,uDAAAhC,OACmCwB,EADnC,SAAAxB,OAC8CyB,EAD9C,WAAAzB,OAFR,mCAEQ,kBAJC,OAIjB0B,EAJiBE,EAAAK,KAQvBC,QAAQC,IAAIT,GACW,MAAnBA,EAAQU,QACVlB,EAASH,OAAAsB,EAAA,EAAAtB,CAAA,GACJE,EADG,CAENR,WAAW,EACXhB,KAAMiC,EAAQY,KAAKZ,QAAQ,GAC3BvB,YAAaoC,KAAKC,MAAMd,EAAQY,KAAKG,KAAKC,SAG9CR,QAAQC,IAAIT,EAAQY,MAjBG,wBAAAV,EAAAe,SAAApB,MAAH,gBAAAqB,EAAAC,GAAA,OAAArD,EAAAsD,MAAAC,KAAAC,YAAA,GA+BtB,OAXAC,oBAAU,WACJC,UAAUC,aACZD,UAAUC,YAAYC,mBAAtB,eAAAC,EAAAtC,OAAAK,EAAA,EAAAL,CAAAM,EAAAxB,EAAAyB,KAAyC,SAAAgC,EAAMC,GAAN,IAAA/B,EAAAC,EAAA,OAAAJ,EAAAxB,EAAA8B,KAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,OACjCN,EAAM+B,EAASE,OAAOC,SACtBjC,EAAM8B,EAASE,OAAOE,UAC5BxC,EAAiBK,EAAKC,GAHiB,wBAAA+B,EAAAb,SAAAW,MAAzC,gBAAAM,GAAA,OAAAP,EAAAP,MAAAC,KAAAC,YAAA,KAOD,IAGDpD,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAC,QAAc,IAAIW,MAAOC,aACrChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZkB,EAAMR,UACLb,EAAAC,EAAAC,cAACO,EAAA,SAAD,KACET,EAAAC,EAAAC,cAAC+D,EAAD,CAAapE,KAAMwB,EAAMxB,KAAMW,KAAMa,EAAMb,OAC3CR,EAAAC,EAAAC,cAACgE,EAAD,CAAgB3D,YAAac,EAAMd,YAAaC,KAAMa,EAAMb,QAG9D,iBCpDV2D,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.db8c8abb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst WeatherIcon = ({ icon }) => {\r\n  const dayOrNight = icon.icon[icon.icon.length - 1];\r\n\r\n  return (\r\n    <div className=\"icon\">\r\n      <i className={`owf owf-${icon.id}-${dayOrNight}`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherIcon;\r\n","import React, { Fragment } from \"react\";\r\n\r\nconst WeatherDetails = ({ temperature, time }) => (\r\n  <Fragment>\r\n    <div className=\"temp\">{temperature} Â°C</div>\r\n    <div className=\"time\">{time}</div>\r\n  </Fragment>\r\n);\r\n\r\nexport default WeatherDetails;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport axios from \"axios\";\n\nimport WeatherIcon from \"./components/WeatherIcon\";\nimport WeatherDetails from \"./components/WeatherDetails\";\n\nimport \"./scss/main.css\";\n\nconst App = () => {\n  const [state, setState] = useState({\n    dataReady: false,\n    icon: undefined,\n    temperature: undefined,\n    time: new Date().getHours() + \":\" + new Date().getMinutes()\n  });\n\n  const fetchWeatherData = async (lat, lon) => {\n    const city = \"Lutsk\";\n    const appId = \"4a7bba8e35b7bfadb8a039bd6b248e38\";\n\n    const weather = await axios.get(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${appId}&units=metric`\n    );\n\n    console.log(weather);\n    if (weather.status === 200) {\n      setState({\n        ...state,\n        dataReady: true,\n        icon: weather.data.weather[0],\n        temperature: Math.round(weather.data.main.temp)\n      });\n    }\n    console.log(weather.data);\n  };\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async position => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n        fetchWeatherData(lat, lon);\n      });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className={`App time-${new Date().getHours()}`}>\n      <div className=\"content\">\n        {state.dataReady ? (\n          <Fragment>\n            <WeatherIcon icon={state.icon} time={state.time} />\n            <WeatherDetails temperature={state.temperature} time={state.time} />\n          </Fragment>\n        ) : (\n          \"Loading...\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}